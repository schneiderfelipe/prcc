#!/usr/bin/python3

"""
personal daily time series storage for stock market and funds
"""

import logging
import argparse

import prcc

_logging_level = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}

# TODO: Minimum graph/plot interface like
# <https://github.com/jackmoody11/portfolio_opt>
# TODO: Minimum score interface like <https://github.com/jackmoody11/stockscore>
# (I didn't like or understood the code there, but the idea is good)
def cli():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbosity",
        action="count",
        default=0,
        help="increase output verbosity",
    )

    subparsers = parser.add_subparsers(dest="command", help="possible commands")
    subparsers.required = True

    parser_list_desc = "list all tickers currently available in the database"
    parser_list = subparsers.add_parser(
        "list", description=parser_list_desc, help=parser_list_desc
    )

    parser_import_desc = "retrieve, parse and store data for a new ticker set"
    parser_import = subparsers.add_parser(
        "import", description=parser_import_desc, help=parser_import_desc
    )
    parser_import.add_argument(
        "objects", metavar="object", nargs="+", help="objects to import"
    )
    parser_import.add_argument(
        "--from",
        "-f",
        dest="source",
        default="av-daily-adjusted",
        choices=["infofundos", "av-daily-adjusted"],
        help="source of data",
    )

    parser_export_desc = "output all available data for a set of tickers"
    parser_export = subparsers.add_parser(
        "export", description=parser_export_desc, help=parser_export_desc
    )
    parser_export.add_argument(
        "objects", metavar="object", nargs="+", help="objects to export"
    )
    parser_export.add_argument("--to", "-t", dest="dest", help="destination of data")

    parser_index_desc = "list tickers that compose particular indices"
    parser_index = subparsers.add_parser(
        "index", description=parser_index_desc, help=parser_index_desc
    )
    parser_index.add_argument(
        "names",
        metavar="name",
        nargs="+",
        choices=prcc._b3_indices,
        type=str.lower,
        help="index name",
    )

    args = parser.parse_args()
    logging.basicConfig(level=_logging_level[args.verbosity])

    if args.command == "list":
        for item in prcc.collection.list_items():
            print(item)
    elif args.command == "import":
        prcc.import_objects(args.objects, args.source)
    elif args.command == "export":
        dataframe = prcc.export_objects(args.objects)
        if args.dest is not None:
            # TODO: test extension to support other file types
            dataframe.to_csv(args.dest)
        else:
            print(dataframe.to_csv())
    elif args.command == "index":
        tickers = []
        for name in args.names:
            tickers += [
                ticker for ticker in prcc.get_index(name) if ticker not in tickers
            ]
        print("\n".join(tickers))


if __name__ == "__main__":
    cli()
